/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NumberConfiguration.java
 *
 * Created on 06.11.2009, 16:46:16
 */
package gui.dialogs.configuration;

import javax.swing.SpinnerNumberModel;
import core.signal.Signal;

/**
 *
 * @author sylvester
 */
public class NumberConfiguration extends ConfigurationPanel {

	public static enum Type {

		BYTE,
		SHORT,
		INTEGER,
		LONG,
		FLOAT,
		DOUBLE,
		SIGNAL
	}

	/**
	 * Creates new form NumberConfiguration
	 *
	 * @deprecated Only for GUI Designer
	 */
	public NumberConfiguration() {
		this(Type.LONG, null);
	}

	public NumberConfiguration(Type type, ConfigureDialog.ParameterNode listeningNode) {
		super(listeningNode);
		this.type = type;
		initComponents();
		this.nameLabel.setText(this.getParameterName());

		switch (this.type) {
			case BYTE:
				this.spinnerModel = new SpinnerNumberModel(Integer.valueOf(0).byteValue(),
						Byte.MIN_VALUE,
						Byte.MAX_VALUE,
						Integer.valueOf(1).byteValue());
				this.slider.setMinimum(Byte.MIN_VALUE);
				this.slider.setMaximum(Byte.MAX_VALUE);
				break;
			case SHORT:
				this.spinnerModel = new SpinnerNumberModel(Integer.valueOf(0).shortValue(),
						Short.MIN_VALUE,
						Short.MAX_VALUE,
						Integer.valueOf(1).shortValue());
				this.slider.setMinimum(Short.MIN_VALUE);
				this.slider.setMaximum(Short.MAX_VALUE);
				break;
			case INTEGER:
				this.spinnerModel = new SpinnerNumberModel(0,
						Integer.MIN_VALUE,
						Integer.MAX_VALUE,
						1);
				this.slider.setMinimum(Integer.MIN_VALUE);
				this.slider.setMaximum(Integer.MAX_VALUE);
				break;
			case LONG:
				this.spinnerModel = new SpinnerNumberModel(0L, Long.MIN_VALUE, Long.MAX_VALUE, 1L);
				this.slider.setEnabled(false);
				break;
			case FLOAT:
				this.spinnerModel = new SpinnerNumberModel(0F, Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY, 1F);
				this.slider.setEnabled(false);
				break;
			case DOUBLE:
				this.spinnerModel = new SpinnerNumberModel(0D, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, 1D);
				this.slider.setEnabled(false);
				break;
			case SIGNAL:
				this.spinnerModel = new SpinnerNumberModel(1, 1, 255, 1);
				this.slider.setMinimum(1);
				this.slider.setMaximum(255);
				break;
		}

		this.spinner.setModel(this.spinnerModel);

		this.updateValue();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        spinner = new javax.swing.JSpinner();
        nameLabel = new javax.swing.JLabel();
        slider = new javax.swing.JSlider();

        setPreferredSize(new java.awt.Dimension(500, 88));

        spinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerStateChanged(evt);
            }
        });

        nameLabel.setText("jLabel1");

        slider.setMaximum(1);
        slider.setMinimum(-1);
        slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spinner, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(slider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

	private void spinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerStateChanged
		if (this.controlsReleased())
			this.setValue(this.spinnerModel.getNumber());
	}//GEN-LAST:event_spinnerStateChanged

	private void sliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderStateChanged
		if (this.controlsReleased())
			this.setValue(this.slider.getValue());
	}//GEN-LAST:event_sliderStateChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel nameLabel;
    private javax.swing.JSlider slider;
    private javax.swing.JSpinner spinner;
    // End of variables declaration//GEN-END:variables
	private Type type;
	private SpinnerNumberModel spinnerModel;

	private void setValue(Number value) {
		if (this.type == Type.SIGNAL)
			super.setValue(new Signal((Integer) value));
		else
			super.setValue(value);
	}

	protected void updateValue() {
		this.blockControls();
		Number number = null;
		if (this.getValue() instanceof Number && this.type != Type.SIGNAL)
			number = (Number) this.getValue();
		else if (this.getValue() instanceof Signal && this.type == Type.SIGNAL)
			number = (Integer) ((Signal) this.getValue()).size();
		if (number != null) {
			this.spinnerModel.setValue(number);
			if (this.slider.isEnabled())
				this.slider.setValue(number.intValue());
		}
		this.releaseControls();
	}
}
