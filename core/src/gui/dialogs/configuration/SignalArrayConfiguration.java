/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SignalArrayConfiguration.java
 *
 * Created on 06.11.2009, 15:59:30
 */
package gui.dialogs.configuration;

import core.build.checking.types.ArrayType;
import core.signal.Signal;
import java.util.Arrays;
import javax.swing.JDialog;

/**
 *
 * @author sylvester
 */
public class SignalArrayConfiguration extends ConfigurationPanel {

	/**
	 * Creates new form SignalArrayConfiguration
	 * @deprecated Only for the GUI Designer
	 */
	public SignalArrayConfiguration() {
		this(null);
	}

	public SignalArrayConfiguration(ConfigureDialog.ParameterNode listeningNode) {
		super(listeningNode);
		initComponents();
		this.nameLabel.setText(this.getParameterName());

		if (this.listeningNode.getParameterType() == ParameterType.INPUT) {
			this.nameLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/icons/inputSignal.png")));
			this.nameLabel.setToolTipText("Input Signal named \"" + this.getName() + "\"");
		} else if (this.listeningNode.getParameterType() == ParameterType.OUTPUT) {
			this.nameLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/icons/outputSignal.png")));
			this.nameLabel.setToolTipText("Output Signal named \"" + this.getName() + "\"");
		}
		this.lineCountField.setEnabled(this.listeningNode.getType() instanceof ArrayType);

		this.updateValue();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nameLabel = new javax.swing.JLabel();
        bitWidthField = new javax.swing.JSpinner();
        bitWidthLabel = new javax.swing.JLabel();
        lineCountLabel = new javax.swing.JLabel();
        lineCountField = new javax.swing.JSpinner();

        setPreferredSize(new java.awt.Dimension(500, 28));

        nameLabel.setText("jLabel1");

        bitWidthField.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));
        bitWidthField.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                bitWidthFieldStateChanged(evt);
            }
        });

        bitWidthLabel.setText("Bit width:");

        lineCountLabel.setText("Number of lines:");

        lineCountField.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(0), null, Integer.valueOf(1)));
        lineCountField.setVerifyInputWhenFocusTarget(false);
        lineCountField.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                lineCountFieldStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lineCountLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lineCountField, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(bitWidthLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bitWidthField, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(bitWidthField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(bitWidthLabel)
                .addComponent(lineCountField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(lineCountLabel)
                .addComponent(nameLabel))
        );
    }// </editor-fold>//GEN-END:initComponents

	private void lineCountFieldStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_lineCountFieldStateChanged
		if (this.controlsReleased())
			this.writeValue();
	}//GEN-LAST:event_lineCountFieldStateChanged

	private void bitWidthFieldStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_bitWidthFieldStateChanged
		if (this.controlsReleased())
			this.writeValue();
	}//GEN-LAST:event_bitWidthFieldStateChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner bitWidthField;
    private javax.swing.JLabel bitWidthLabel;
    private javax.swing.JSpinner lineCountField;
    private javax.swing.JLabel lineCountLabel;
    private javax.swing.JLabel nameLabel;
    // End of variables declaration//GEN-END:variables

	private void writeValue() {
		if (this.listeningNode.getType() instanceof ArrayType) {
			this.setValue(this.lineCountField.getValue());
			for (int i = 0; i < this.getListeningNode().getChildCount(); i++)
				this.getListeningNode().getChildAt(i).setValue(new Signal((Integer) this.bitWidthField.getValue()));
		} else {
			Signal signal = new Signal((Integer) this.bitWidthField.getValue());
			this.setValue(signal);
		}
	}

	@Override
	protected void updateValue() {
		this.blockControls();
		if (this.listeningNode.getType() instanceof ArrayType) {
			if (this.getValue() instanceof Integer) {
				this.lineCountField.setValue((Integer) this.getValue());
				if (this.getListeningNode().getChildCount() > 0 && this.getListeningNode().getChildAt(0).getValue() instanceof Signal)
					this.bitWidthField.setValue(((Signal) this.getListeningNode().getChildAt(0).getValue()).size());
			}
		} else if (this.getValue() instanceof Signal) {
			Signal value = (Signal) this.getValue();
			this.lineCountField.setValue(1);
			this.bitWidthField.setValue(value.size());
		}
		this.releaseControls();
	}

	@Override
	protected void updateDescendant(int depth) {
		this.blockControls();
		if (depth == 1 && this.listeningNode.getType() instanceof ArrayType)
			if (this.getListeningNode().getChildCount() > 0 && this.getListeningNode().getChildAt(0).getValue() instanceof Signal)
				this.bitWidthField.setValue(((Signal) this.getListeningNode().getChildAt(0).getValue()).size());
		this.releaseControls();
	}
}
