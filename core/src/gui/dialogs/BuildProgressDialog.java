
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *                                                                           *
 * Copyright 2009 Lars Hupel, Torben Maack, Sylvester Tremmel                *
 *                                                                           *
 * This file is part of Jamog.                                               *
 *                                                                           *
 * Jamog is free software: you can redistribute it and/or modify             *
 * it under the terms of the GNU General Public License as published by      *
 * the Free Software Foundation; version 3.                                  *
 *                                                                           *
 * Jamog is distributed in the hope that it will be useful,                  *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of            *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the              *
 * GNU General Public License for more details.                              *
 *                                                                           *
 * You should have received a copy of the GNU General Public License         *
 * along with Jamog. If not, see <http://www.gnu.org/licenses/>.             *
 *                                                                           *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
package gui.dialogs;

import core.build.Component;
import core.monitor.AnalyzeListener;
import core.monitor.EnvironmentListener;
import gui.util.Properties;
import java.awt.Color;

/**
 *
 * @author sylvester
 */
public class BuildProgressDialog extends javax.swing.JDialog implements EnvironmentListener, AnalyzeListener {

	private static enum State {

		LINKING,
		CONSTRUCTING,
		ANALYSING
	}

	/** Creates new form BuildProgressDialog */
	public BuildProgressDialog(java.awt.Frame parent, boolean modal) {
		super(parent, modal);
		initComponents();
		this.setLocationRelativeTo(Properties.getProfile().getMainWindow());
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        linkingLabel = new javax.swing.JLabel();
        linkingProgressBar = new javax.swing.JProgressBar();
        constructionLabel = new javax.swing.JLabel();
        constructionProgressBar = new javax.swing.JProgressBar();
        analysisLabel1 = new javax.swing.JLabel();
        analysisProgressBar1 = new javax.swing.JProgressBar();
        analysisLabel2 = new javax.swing.JLabel();
        analysisProgressBar2 = new javax.swing.JProgressBar();
        proceedButton = new javax.swing.JButton();
        errorTextScrollPane = new javax.swing.JScrollPane();
        errorTextPane = new javax.swing.JTextPane();
        abortButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        linkingLabel.setText("Linking:");

        linkingProgressBar.setStringPainted(true);

        constructionLabel.setText("Construction:");

        constructionProgressBar.setStringPainted(true);

        analysisLabel1.setText("Analysis (1):");

        analysisProgressBar1.setStringPainted(true);

        analysisLabel2.setText("Analysis (2):");

        analysisProgressBar2.setStringPainted(true);

        proceedButton.setText("Proceed");
        proceedButton.setEnabled(false);
        proceedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proceedButtonActionPerformed(evt);
            }
        });

        errorTextPane.setContentType("text/html");
        errorTextPane.setEditable(false);
        errorTextPane.setText("<html>\n  <body>\n    <p style=\"margin-top: 0\">\n      No errors occured\n    </p>\n  </body>\n</html>\n");
        errorTextScrollPane.setViewportView(errorTextPane);

        abortButton.setText("Abort");
        abortButton.setEnabled(false);
        abortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abortButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(analysisLabel2)
                            .addComponent(analysisLabel1)
                            .addComponent(constructionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(linkingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(linkingProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 353, Short.MAX_VALUE)
                            .addComponent(constructionProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 353, Short.MAX_VALUE)
                            .addComponent(analysisProgressBar1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 353, Short.MAX_VALUE)
                            .addComponent(analysisProgressBar2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 353, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(abortButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(proceedButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(errorTextScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 464, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(linkingProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(linkingLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(constructionProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(constructionLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(analysisProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(analysisLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(analysisProgressBar2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(analysisLabel2))
                .addGap(18, 18, 18)
                .addComponent(errorTextScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(proceedButton)
                    .addComponent(abortButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void abortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abortButtonActionPerformed
		this.pressedButton = this.abortButton;
		synchronized (this) {
			this.notify();
		}
	}//GEN-LAST:event_abortButtonActionPerformed

	private void proceedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proceedButtonActionPerformed
		this.pressedButton = this.proceedButton;
		synchronized (this) {
			this.notify();
		}
	}//GEN-LAST:event_proceedButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton abortButton;
    private javax.swing.JLabel analysisLabel1;
    private javax.swing.JLabel analysisLabel2;
    private javax.swing.JProgressBar analysisProgressBar1;
    private javax.swing.JProgressBar analysisProgressBar2;
    private javax.swing.JLabel constructionLabel;
    private javax.swing.JProgressBar constructionProgressBar;
    private javax.swing.JTextPane errorTextPane;
    private javax.swing.JScrollPane errorTextScrollPane;
    private javax.swing.JLabel linkingLabel;
    private javax.swing.JProgressBar linkingProgressBar;
    private javax.swing.JButton proceedButton;
    // End of variables declaration//GEN-END:variables
	long linkingTotal = 0;
	long linkingCurrent = 0;
	long constructionTotal = 0;
	long constructionCurrent = 0;
	int analysisCalculatorCount = 0;
	int analysisPairCount = 0;
	int[] analysisCalculatorPasses = new int[6];
	int[] analysisPairPasses = new int[2];
	javax.swing.JButton pressedButton = null;

	public void setTotalLinking(long number) {
		this.linkingTotal = number;
		this.refreshProgress(State.LINKING);
	}

	public void setCurrentLinking(long number) {
		this.linkingCurrent = number;
		this.refreshProgress(State.LINKING);
	}

	@Override
	public boolean exceptionOccured(Component c, Exception exc) {
		this.errorTextPane.setForeground(Color.red);
		String text = "<html><body><p style=\"margin-top: 0; text-decoration: underline;\">" +
				"Exception in component <strong>" + c.getName() + "</strong></p>";
		Throwable throwable = exc;
		boolean first = true;
		while (throwable != null) {
			text += "<p style=\"margin-top: 10px\">";
			if (!first) {
				text += "<span style=\"font-size:small;\">caused by:</span> ";
			}
			first = false;
			text += "<em>" + throwable.toString() + "</em>";
			for (StackTraceElement element : throwable.getStackTrace())
				text += "<div style=\"padding-left: 20px; text-indent: -20px;\">at <strong>" +
						element.getClassName() + "." + element.getMethodName() + "</strong><br/>" +
						"<span style=\"font-size:small;\">in file: <strong>" + element.getFileName() + "</strong>" +
						" at line <strong>" + element.getLineNumber() + "</strong></span></div>";
			text += "</p>";
			throwable = throwable.getCause();
		}
		text += "</body></html>";
		this.errorTextPane.setText(text);

		this.proceedButton.setEnabled(true);
		this.abortButton.setEnabled(true);
		synchronized (this) {
			try {
				this.wait();
			} catch (InterruptedException ex) {
				// Do nothing
			}
		}
		this.proceedButton.setEnabled(false);
		this.abortButton.setEnabled(false);

		if (this.pressedButton == this.proceedButton)
			return true;
		else
			return false;
	}

	@Override
	public void increaseConstructedCount(long delta) {
//System.out.println("Construction: ConstCount inc: " + delta);
		this.constructionCurrent += delta;
		this.refreshProgress(State.CONSTRUCTING);
	}

	@Override
	public void increaseTotalCount(long delta) {
//System.out.println("Construction: TotalCount inc: " + delta);
		this.constructionTotal += delta;
		this.refreshProgress(State.CONSTRUCTING);
	}

	@Override
	public void increaseCalculators(int pass, int finished) {
//System.out.println("Analysis: Calc inc: " + finished + " (pass: "+ pass + ")");
		this.analysisCalculatorPasses[pass - 1] += finished;
		this.refreshProgress(State.ANALYSING);
	}

	@Override
	public void increasePriorityPairs(int pass, int finished) {
//System.out.println("Analysis: Pair inc: " + finished + " (pass: " + pass + ")");
		this.analysisPairPasses[pass - 1] += finished;
		this.refreshProgress(State.ANALYSING);
	}

	@Override
	public void initTotals(int calculators, int priority_pairs) {
//System.out.println("Analysis: Total init: calc: " + calculators + "; pair: " + priority_pairs);
		this.analysisCalculatorCount = calculators;
		this.analysisPairCount = priority_pairs;
		this.refreshProgress(State.ANALYSING);
	}

	private void refreshProgress(State state) {
		//if (!this.isVisible())
		//	return;
		switch (state) {
			case LINKING:
				int linkingPercent;
				if (this.linkingTotal == 0)
					linkingPercent = 100;
				else
					linkingPercent = (int) (this.linkingCurrent * 100 / this.linkingTotal);
				this.linkingProgressBar.setValue(linkingPercent);
				this.linkingProgressBar.setString(this.linkingCurrent + " of " + this.linkingTotal + " linked (" + linkingPercent + "%)");
				break;
			case CONSTRUCTING:
				int constructingPercent;
				if (this.constructionTotal == 0)
					constructingPercent = 100;
				else
					constructingPercent = (int) (this.constructionCurrent * 100 / this.constructionTotal);
				this.constructionProgressBar.setValue(constructingPercent);
				this.constructionProgressBar.setString(this.constructionCurrent + " of " + this.constructionTotal + " constructed (" + constructingPercent + "%)");
				break;
			case ANALYSING:
				byte completedCalculatorPasses = 0;
				int calculatorSteps = 0;
				for (int i = 0; i < this.analysisCalculatorPasses.length; i++) {
					if (this.analysisCalculatorPasses[i] == this.analysisCalculatorCount && completedCalculatorPasses == i)
						completedCalculatorPasses++;
					calculatorSteps += this.analysisCalculatorPasses[i];
				}
				int calculatorPercent;
				if (this.analysisCalculatorCount == 0)
					calculatorPercent = 100;
				else
					calculatorPercent = calculatorSteps * 100 / (this.analysisCalculatorCount * this.analysisCalculatorPasses.length);
				this.analysisProgressBar1.setValue(calculatorPercent);
				this.analysisProgressBar1.setString(completedCalculatorPasses + " of " + this.analysisCalculatorPasses.length + " completed (" + calculatorPercent + "%)");

				byte completedPairPasses = 0;
				int pairSteps = 0;
				for (int i = 0; i < this.analysisPairPasses.length; i++) {
					if (this.analysisPairPasses[i] == this.analysisPairCount && completedPairPasses == i)
						completedPairPasses++;
					pairSteps += this.analysisPairPasses[i];
				}
				int pairPercent;
				if (this.analysisPairCount == 0)
					pairPercent = 100;
				else
					pairPercent = pairSteps * 100 / (this.analysisPairCount * this.analysisPairPasses.length);
				this.analysisProgressBar2.setValue(pairPercent);
				this.analysisProgressBar2.setString(completedPairPasses + " of " + this.analysisPairPasses.length + " completed (" + pairPercent + "%)");
				break;
		}
	}

}
