/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ManageSignalDialog.java
 *
 * Created on Oct 18, 2009, 12:41:10 AM
 */
package gui.dialogs.management;

import core.signal.Bit;
import gui.circuit.management.Linkage;
import gui.circuit.LinkageGroup;
import gui.util.Properties;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.SpinnerNumberModel;

/**
 *
 * @author sylvester
 */
public class ManageSignalDialog extends javax.swing.JDialog {

	/**
	 * Creates new form ManageSignalDialog
	 * @deprecated Only for GUI Designer
	 */
	public ManageSignalDialog(java.awt.Frame parent, boolean modal) {
		super(parent, modal);
		initComponents();
	}

	public ManageSignalDialog(LinkageGroup linkageGroup) {
		super(Properties.getProfile().getMainWindow(), true);
		this.linkageGroup = linkageGroup;
		this.linkages = new ArrayList<Linkage>(this.linkageGroup.getLinkages());
		this.bits = new ArrayList<Bit>(this.linkages.size());
		for (int i = 0; i < this.linkages.size(); i++)
			this.bits.add(this.linkages.get(i).getSignal().getBit(0));
		this.initComponents();
		this.initSingleValueElements();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        singleValueRadioButtonGroup = new javax.swing.ButtonGroup();
        completeValueLabel = new javax.swing.JLabel();
        completeValueTextField = new javax.swing.JTextField(this.linkageGroup.getSignalValues());
        separator = new javax.swing.JSeparator();
        singleValueLabel1 = new javax.swing.JLabel();
        singleValueSpinner = new javax.swing.JSpinner(new SpinnerNumberModel(1, 1, this.linkageGroup.size(), 1));
        singleValueLabel2 = new javax.swing.JLabel();
        singleValueLabel3 = new javax.swing.JLabel();
        singleValueRadioZ = new javax.swing.JRadioButton();
        singleValueRadioL = new javax.swing.JRadioButton();
        singleValueRadioH = new javax.swing.JRadioButton();
        singleValueTableScroll = new javax.swing.JScrollPane();
        tableModel = new javax.swing.table.DefaultTableModel(
            new String [] {
                "Component", "Pin", "Line", "Bit"
            },
            0
        ) {
            Class[] types = new Class [] {
                gui.circuit.ComponentWrapper.class, gui.circuit.management.Connector.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
        singleValueTable = new javax.swing.JTable();
        abortButton = new javax.swing.JButton();
        writeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        completeValueLabel.setText("Signal value:");

        completeValueTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                completeValueTextFieldFocusLost(evt);
            }
        });
        completeValueTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                completeValueTextFieldKeyReleased(evt);
            }
        });

        singleValueLabel1.setText("Selected bit:");

        singleValueSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                singleValueSpinnerStateChanged(evt);
            }
        });

        singleValueLabel2.setText("of " + String.valueOf(this.linkageGroup.size()));

        singleValueLabel3.setText("Bit value:");

        singleValueRadioButtonGroup.add(singleValueRadioZ);
        singleValueRadioZ.setText("Z");
        singleValueRadioZ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                singleValueRadioZActionPerformed(evt);
            }
        });

        singleValueRadioButtonGroup.add(singleValueRadioL);
        singleValueRadioL.setText("L");
        singleValueRadioL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                singleValueRadioLActionPerformed(evt);
            }
        });

        singleValueRadioButtonGroup.add(singleValueRadioH);
        singleValueRadioH.setText("H");
        singleValueRadioH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                singleValueRadioHActionPerformed(evt);
            }
        });

        singleValueTable.setModel(tableModel);
        singleValueTableScroll.setViewportView(singleValueTable);

        abortButton.setText("Abort");
        abortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abortButtonActionPerformed(evt);
            }
        });

        writeButton.setText("Write");
        writeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                writeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(completeValueLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(completeValueTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(abortButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(writeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addComponent(separator, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 538, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(singleValueLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(singleValueSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(singleValueLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
                .addComponent(singleValueLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(singleValueRadioH)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(singleValueRadioL)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(singleValueRadioZ)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(singleValueTableScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 514, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(completeValueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(completeValueLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(separator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(singleValueLabel1)
                    .addComponent(singleValueLabel2)
                    .addComponent(singleValueRadioZ)
                    .addComponent(singleValueRadioL)
                    .addComponent(singleValueRadioH)
                    .addComponent(singleValueLabel3)
                    .addComponent(singleValueSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(singleValueTableScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(writeButton)
                    .addComponent(abortButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void singleValueSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_singleValueSpinnerStateChanged
		this.initSingleValueElements();
	}//GEN-LAST:event_singleValueSpinnerStateChanged

	private void singleValueRadioHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_singleValueRadioHActionPerformed
		this.bits.set(((Integer) this.singleValueSpinner.getValue()) - 1, Bit.H);
		this.updateCompleteValueField();
	}//GEN-LAST:event_singleValueRadioHActionPerformed

	private void singleValueRadioLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_singleValueRadioLActionPerformed
		this.bits.set(((Integer) this.singleValueSpinner.getValue()) - 1, Bit.L);
		this.updateCompleteValueField();
	}//GEN-LAST:event_singleValueRadioLActionPerformed

	private void singleValueRadioZActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_singleValueRadioZActionPerformed
		this.bits.set(((Integer) this.singleValueSpinner.getValue()) - 1, Bit.Z);
		this.updateCompleteValueField();
	}//GEN-LAST:event_singleValueRadioZActionPerformed

	private void completeValueTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_completeValueTextFieldFocusLost
		this.readBitsFromString(this.completeValueTextField.getText());
	}//GEN-LAST:event_completeValueTextFieldFocusLost

	private void completeValueTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_completeValueTextFieldKeyReleased
		if (evt.isActionKey())
			this.readBitsFromString(this.completeValueTextField.getText());
	}//GEN-LAST:event_completeValueTextFieldKeyReleased

	private void abortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abortButtonActionPerformed
		this.dispose();
	}//GEN-LAST:event_abortButtonActionPerformed

	private void writeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_writeButtonActionPerformed
		for (int i = 0; i < this.bits.size(); i++)
			this.linkages.get(i).getSignal().setBit(0, this.bits.get(i));
		this.dispose();
	}//GEN-LAST:event_writeButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton abortButton;
    private javax.swing.JLabel completeValueLabel;
    private javax.swing.JTextField completeValueTextField;
    private javax.swing.JSeparator separator;
    private javax.swing.JLabel singleValueLabel1;
    private javax.swing.JLabel singleValueLabel2;
    private javax.swing.JLabel singleValueLabel3;
    private javax.swing.ButtonGroup singleValueRadioButtonGroup;
    private javax.swing.JRadioButton singleValueRadioH;
    private javax.swing.JRadioButton singleValueRadioL;
    private javax.swing.JRadioButton singleValueRadioZ;
    private javax.swing.JSpinner singleValueSpinner;
    javax.swing.table.DefaultTableModel tableModel;
    private javax.swing.JTable singleValueTable;
    private javax.swing.JScrollPane singleValueTableScroll;
    private javax.swing.JButton writeButton;
    // End of variables declaration//GEN-END:variables
	private LinkageGroup linkageGroup;
	// Copied to have good random access
	private ArrayList<Linkage> linkages;
	private ArrayList<Bit> bits;

	private void initSingleValueElements() {
		Linkage linkage = this.linkages.get(((Integer) this.singleValueSpinner.getValue()) - 1);
		if (linkage.getSignal().compareBit(0, Bit.L))
			this.singleValueRadioL.setSelected(true);
		else if (linkage.getSignal().compareBit(0, Bit.H))
			this.singleValueRadioH.setSelected(true);
		else
			this.singleValueRadioZ.setSelected(true);
		while (this.tableModel.getRowCount() > 0)
			this.tableModel.removeRow(0);
		for (Linkage.Endpoint endpoint : linkage.getEndpoints())
			this.tableModel.addRow(new Object[]{
						endpoint.getConnector().getWrapper(),
						endpoint.getConnector(),
						endpoint.getLine(),
						endpoint.getBit()
					});
	}

	private void readBitsFromString(String value) {
		if (value.length() < this.bits.size()) {
			char[] additionalChars = new char[this.bits.size() - value.length()];
			Arrays.fill(additionalChars, 'Z');
			value += new String(additionalChars);
		}
		for (int i = 0; i < this.bits.size(); i++)
			switch (value.charAt(i)) {
				case 'h':
				case 'H':
					this.bits.set(i, Bit.H);
					break;
				case 'l':
				case 'L':
					this.bits.set(i, Bit.L);
					break;
				case 'z':
				case 'Z':
					this.bits.set(i, Bit.Z);
					break;
			}
		this.updateCompleteValueField();
		this.updateSingleValueFields();
	}

	private void updateCompleteValueField() {
		String value = "";
		for (Bit bit : this.bits)
			value += bit.toString();
		this.completeValueTextField.setText(value);
	}

	private void updateSingleValueFields() {
		switch (this.bits.get(((Integer) this.singleValueSpinner.getValue()) - 1)) {
			case H:
				this.singleValueRadioH.setSelected(true);
				break;
			case L:
				this.singleValueRadioL.setSelected(true);
				break;
			case Z:
				this.singleValueRadioZ.setSelected(true);
				break;
		}
	}

}
